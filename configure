#!/bin/bash

# ManyJson 项目配置脚本
# 遵循业界标准的 configure 脚本实践

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 打印带颜色的消息
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 默认配置
BUILD_TYPE="Debug"
BUILD_DIR="build"
INSTALL_PREFIX="/usr/local"
ENABLE_TESTS="ON"
DOWNLOAD_GTEST="ON"
CLEAN_BUILD="OFF"

# 显示帮助信息
show_help() {
    echo "ManyJson 项目配置脚本"
    echo ""
    echo "用法: $0 [选项]"
    echo ""
    echo "选项:"
    echo "  -h, --help              显示此帮助信息"
    echo "  -d, --debug             构建类型: Debug (默认)"
    echo "  -r, --release           构建类型: Release"
    echo "  -b, --build-dir DIR     构建目录 (默认: build)"
    echo "  -p, --prefix DIR        安装前缀 (默认: /usr/local)"
    echo "  -t, --no-tests          禁用测试"
    echo "  -g, --no-gtest          不下载 Google Test (使用系统安装的)"
    echo "  -c, --clean             清理构建目录"
    echo ""
    echo "示例:"
    echo "  $0                      # 使用默认配置"
    echo "  $0 -r -b build_release  # Release 构建到 build_release 目录"
    echo "  $0 -t -g                # 禁用测试，使用系统 Google Test"
}

# 解析命令行参数
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -d|--debug)
            BUILD_TYPE="Debug"
            shift
            ;;
        -r|--release)
            BUILD_TYPE="Release"
            shift
            ;;
        -b|--build-dir)
            BUILD_DIR="$2"
            shift 2
            ;;
        -p|--prefix)
            INSTALL_PREFIX="$2"
            shift 2
            ;;
        -t|--no-tests)
            ENABLE_TESTS="OFF"
            shift
            ;;
        -g|--no-gtest)
            DOWNLOAD_GTEST="OFF"
            shift
            ;;
        -c|--clean)
            CLEAN_BUILD="ON"
            shift
            ;;
        *)
            print_error "未知选项: $1"
            show_help
            exit 1
            ;;
    esac
done

print_info "开始配置 ManyJson 项目..."

# 检查必要的工具
check_dependencies() {
    print_info "检查依赖..."
    
    # 检查 CMake
    if ! command -v cmake &> /dev/null; then
        print_error "CMake 未找到，请安装 CMake"
        exit 1
    fi
    
    # 检查编译器
    if ! command -v g++ &> /dev/null && ! command -v clang++ &> /dev/null; then
        print_error "C++ 编译器未找到，请安装 g++ 或 clang++"
        exit 1
    fi
    
    # 检查 Git (如果需要下载 Google Test)
    if [[ "$DOWNLOAD_GTEST" == "ON" ]] && ! command -v git &> /dev/null; then
        print_error "Git 未找到，请安装 Git"
        exit 1
    fi
    
    print_success "依赖检查通过"
}

# 下载 Google Test
download_gtest() {
    if [[ "$DOWNLOAD_GTEST" == "OFF" ]]; then
        print_info "跳过 Google Test 下载，使用系统安装的版本"
        return
    fi
    
    GTEST_DIR="third_party/googletest"
    GTEST_VERSION="1.12.1"
    
    if [[ -d "$GTEST_DIR" ]]; then
        print_info "Google Test 已存在，跳过下载"
    else
        print_info "下载 Google Test v$GTEST_VERSION..."
        mkdir -p third_party
        git clone --depth 1 --branch release-$GTEST_VERSION \
            https://github.com/google/googletest.git "$GTEST_DIR"
        print_success "Google Test 下载完成"
    fi
}

# 清理构建目录
clean_build() {
    if [[ "$CLEAN_BUILD" == "ON" ]] && [[ -d "$BUILD_DIR" ]]; then
        print_info "清理构建目录: $BUILD_DIR"
        rm -rf "$BUILD_DIR"
    fi
}

# 配置 CMake
configure_cmake() {
    print_info "配置 CMake..."
    print_info "构建类型: $BUILD_TYPE"
    print_info "构建目录: $BUILD_DIR"
    print_info "安装前缀: $INSTALL_PREFIX"
    print_info "启用测试: $ENABLE_TESTS"
    print_info "下载 Google Test: $DOWNLOAD_GTEST"
    
    mkdir -p "$BUILD_DIR"
    cd "$BUILD_DIR"
    
    cmake .. \
        -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
        -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
        -DENABLE_TESTS="$ENABLE_TESTS" \
        -DDOWNLOAD_GTEST="$DOWNLOAD_GTEST"
    
    print_success "CMake 配置完成"
}

# 主函数
main() {
    check_dependencies
    download_gtest
    clean_build
    configure_cmake
    
    print_success "配置完成！"
    echo ""
    echo "📋 下一步操作："
    echo "  构建项目: make -C $BUILD_DIR"
    echo "  运行测试: make -C $BUILD_DIR test"
    echo "  安装项目: make -C $BUILD_DIR install"
    echo "  清理构建: make -C $BUILD_DIR clean"
}

# 运行主函数
main "$@" 