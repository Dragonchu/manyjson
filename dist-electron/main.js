"use strict";const a=require("electron"),f=require("path"),i=require("fs"),w=process.env.NODE_ENV==="development";function n(s,...r){console.log(`[INFO] ${new Date().toISOString()} - ${s}`,...r)}function o(s,r){console.error(`[ERROR] ${new Date().toISOString()} - ${s}`,r)}function p(s,...r){w&&console.log(`[DEBUG] ${new Date().toISOString()} - ${s}`,...r)}function v(s){if(!s||typeof s!="string")return{isValid:!1,error:"Filename is required and must be a string"};const r=s.trim();return r?r.includes("..")||r.includes("/")||r.includes("\\")?{isValid:!1,error:"Filename cannot contain path separators or relative path references"}:/[<>:"|?*\x00-\x1f]/.test(r)?{isValid:!1,error:"Filename contains invalid characters"}:Buffer.byteLength(r,"utf8")>255?{isValid:!1,error:"Filename is too long"}:/^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\.|$)/i.test(r)?{isValid:!1,error:"Filename uses a reserved name"}:{isValid:!0}:{isValid:!1,error:"Filename cannot be empty"}}async function D(s=3){const r=O();for(let e=1;e<=s;e++)try{p(`Ensuring config directory exists (attempt ${e}/${s}):`,r);try{await i.promises.access(r,i.constants.F_OK),p("Config directory already exists")}catch{n("Creating config directory:",r),await i.promises.mkdir(r,{recursive:!0}),n("Config directory created successfully")}try{return await i.promises.access(r,i.constants.W_OK),p("Config directory is writable"),r}catch(t){throw o("Config directory is not writable",t),new Error(`Config directory is not writable: ${r}`)}}catch(t){if(o(`Failed to create or access config directory (attempt ${e}/${s})`,t),e===s)throw t;await new Promise(c=>setTimeout(c,100*e))}throw new Error("Failed to ensure config directory after all retries")}function h(){const s=new a.BrowserWindow({width:1200,height:800,minWidth:1e3,minHeight:700,title:"ManyJson - JSON Schema Manager",backgroundColor:a.nativeTheme.shouldUseDarkColors?"#0a0a0a":"#ffffff",webPreferences:{preload:f.join(__dirname,"preload.js"),contextIsolation:!0,sandbox:!0,nodeIntegration:!1}});if(w)s.loadURL("http://localhost:5173"),s.webContents.openDevTools();else{const r=f.join(__dirname,"../dist/index.html");n("Loading HTML file from:",r),s.loadFile(r).catch(e=>{o("Failed to load HTML file",{htmlPath:r,error:e}),s.webContents.openDevTools()})}return s}function O(){const s=a.app.getPath("userData"),r=f.join(s,"schemas");return p("Config directory path:",r),r}async function g(){return D()}a.ipcMain.handle("read-file-sync",async(s,r)=>{n("IPC: read-file-sync called",{filename:r});try{const e=await i.promises.readFile(r,"utf-8"),t=JSON.parse(e);return n("File read successfully",{filename:r,contentLength:e.length}),t}catch(e){throw o("Failed to read file",{filename:r,error:e}),e}});a.ipcMain.handle("read-text-file",async(s,r)=>{n("IPC: read-text-file called",{filename:r});try{const e=await i.promises.readFile(r,"utf-8");return n("Text file read successfully",{filename:r,contentLength:e.length}),{success:!0,content:e}}catch(e){return o("Failed to read text file",{filename:r,error:e}),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}});a.ipcMain.handle("get-file-stats",async(s,r)=>{n("IPC: get-file-stats called",{filePath:r});try{const e=await i.promises.stat(r);return{success:!0,isFile:e.isFile(),isDirectory:e.isDirectory(),size:e.size,modified:e.mtime}}catch(e){return o("Failed to get file stats",{filePath:r,error:e}),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}});a.ipcMain.handle("list-directory",async(s,r)=>{n("IPC: list-directory called",{dirPath:r});try{const e=await i.promises.readdir(r);return{success:!0,entries:(await Promise.all(e.map(async l=>{const d=f.join(r,l);try{const u=await i.promises.stat(d);return{name:l,path:d,isFile:u.isFile(),isDirectory:u.isDirectory(),size:u.size,modified:u.mtime}}catch(u){return o("Failed to stat entry",{entry:l,error:u}),null}}))).filter(l=>l!==null)}}catch(e){return o("Failed to list directory",{dirPath:r,error:e}),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}});a.ipcMain.handle("write-json-file",async(s,r,e)=>{n("write-json-file requested",{filePath:r,contentLength:e.length});try{const t=f.join(r,"..");try{await i.promises.access(t,i.constants.W_OK),p("Target directory is writable:",t)}catch(c){throw o("Target directory is not writable",{directory:t,error:c}),new Error(`Directory is not writable: ${t}`)}return await i.promises.writeFile(r,e,"utf8"),n("File written successfully:",r),{success:!0}}catch(t){return o("Failed to write file",{filePath:r,error:t instanceof Error?t.message:t,stack:t instanceof Error?t.stack:void 0}),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}});a.ipcMain.handle("get-config-directory",async()=>{n("get-config-directory requested");try{const s=await g();return n("Config directory ready:",s),{success:!0,path:s}}catch(s){return o("Failed to get config directory",s),{success:!1,error:s instanceof Error?s.message:"Unknown error"}}});a.ipcMain.handle("write-config-file",async(s,r,e)=>{n("write-config-file requested",{fileName:r,contentLength:e.length});try{const t=v(r);if(!t.isValid)return o("Invalid filename provided",{fileName:r,error:t.error}),{success:!1,error:t.error};if(typeof e!="string")return o("Invalid content type",{contentType:typeof e}),{success:!1,error:"Content must be a string"};if(e.length>10*1024*1024)return o("Content too large",{contentLength:e.length}),{success:!1,error:"Content is too large (maximum 10MB)"};const c=await g(),l=f.join(c,r);p("Writing config file",{configDir:c,fileName:r,filePath:l});try{await i.promises.access(l,i.constants.F_OK),p("File already exists, checking write permissions"),await i.promises.access(l,i.constants.W_OK)}catch{p("File does not exist, will create new file")}const d=`${l}.tmp`;try{await i.promises.writeFile(d,e,"utf8"),await i.promises.rename(d,l),n("Config file written successfully",{filePath:l,size:e.length})}catch(u){try{await i.promises.unlink(d)}catch{p("No temp file to clean up")}throw u}return{success:!0,filePath:l}}catch(t){return o("Failed to write config file",{fileName:r,error:t instanceof Error?t.message:t,stack:t instanceof Error?t.stack:void 0,code:t==null?void 0:t.code,errno:t==null?void 0:t.errno,syscall:t==null?void 0:t.syscall,path:t==null?void 0:t.path}),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}});a.ipcMain.handle("list-config-files",async()=>{n("list-config-files requested");try{const s=await g();p("Listing files in config directory:",s);const r=await i.promises.readdir(s);p("Found entries:",r);const e=[];for(const t of r){const c=f.join(s,t);try{if((await i.promises.stat(c)).isFile()&&!t.endsWith(".tmp")&&t.endsWith(".json"))try{const d=await i.promises.readFile(c,"utf8"),u=JSON.parse(d);p("Successfully read JSON file:",{fileName:t,size:d.length}),e.push({name:t,path:c,content:u})}catch(d){o("Failed to read or parse JSON file",{fileName:t,error:d})}}catch(l){o("Failed to stat entry",{entry:t,error:l})}}return n("Successfully loaded config files",{count:e.length}),{success:!0,files:e}}catch(s){return o("Failed to list config files",s),{success:!1,error:s instanceof Error?s.message:"Unknown error"}}});a.ipcMain.handle("show-open-dialog",async(s,r)=>{n("show-open-dialog requested",r);try{const e=await a.dialog.showOpenDialog(r);return p("Open dialog result:",e),e}catch(e){return o("Failed to show open dialog",e),{canceled:!0,filePaths:[]}}});a.ipcMain.handle("show-save-dialog",async(s,r)=>{n("show-save-dialog requested",r);try{const e=await a.dialog.showSaveDialog(r);return p("Save dialog result:",e),e}catch(e){return o("Failed to show save dialog",e),{canceled:!0,filePath:void 0}}});a.ipcMain.handle("delete-file",async(s,r)=>{n("delete-file requested",{filePath:r});try{return await i.promises.access(r,i.constants.F_OK),p("File exists, attempting to delete:",r),await i.promises.unlink(r),n("File deleted successfully:",r),{success:!0}}catch(e){return o("Failed to delete file",{filePath:r,error:e instanceof Error?e.message:e,code:e==null?void 0:e.code,errno:e==null?void 0:e.errno}),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}});a.ipcMain.handle("rename-file",async(s,r,e)=>{n("rename-file requested",{oldPath:r,newPath:e});try{if(!r||!e)return{success:!1,error:"Both oldPath and newPath are required"};if(r===e)return n("rename-file skipped: paths are identical"),{success:!0,filePath:e};const t=f.dirname(r),c=f.dirname(e);if(t!==c)return o("rename-file denied: directory changed",{oldDir:t,newDir:c}),{success:!1,error:"Renaming must stay within the original folder"};try{return await i.promises.access(e,i.constants.F_OK),o("rename-file denied: target already exists",{newPath:e}),{success:!1,error:"A file with the new name already exists"}}catch{}return await i.promises.rename(r,e),n("File renamed successfully",{from:r,to:e}),{success:!0,filePath:e}}catch(t){return o("Failed to rename file",{oldPath:r,newPath:e,error:t}),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}});a.ipcMain.handle("copy-file",async(s,r,e)=>{console.log("IPC copy-file requested",{filePath:r,newPath:e}),n("copy-file requested",{filePath:r,newPath:e});try{if(!r||!e)return{success:!1,error:"Both filePath and newPath are required"};try{await i.promises.access(r,i.constants.F_OK|i.constants.R_OK)}catch{return o("copy-file denied: source file not accessible",{filePath:r}),{success:!1,error:"Source file does not exist or is not readable"}}if(r===e)return o("copy-file denied: paths are identical"),{success:!1,error:"Cannot copy file to the same location"};const t=f.dirname(r),c=f.dirname(e);if(t!==c)return o("copy-file denied: directory changed",{sourceDir:t,targetDir:c}),{success:!1,error:"Copying must stay within the original folder"};try{return await i.promises.access(e,i.constants.F_OK),o("copy-file denied: target already exists",{newPath:e}),{success:!1,error:"A file with the target name already exists"}}catch{}const l=await i.promises.readFile(r,"utf8");return await i.promises.writeFile(e,l,"utf8"),n("File copied successfully",{from:r,to:e}),{success:!0,filePath:e}}catch(t){return o("Failed to copy file",{filePath:r,newPath:e,error:t}),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}});a.ipcMain.handle("create-schema-json-directory",async(s,r)=>{n("create-schema-json-directory requested",{schemaName:r});try{const e=await g(),t=f.join(e,"json-files",r.replace(/[^a-zA-Z0-9.-]/g,"_"));return await i.promises.mkdir(t,{recursive:!0}),n("Schema JSON directory created/verified:",t),{success:!0,path:t}}catch(e){return o("Failed to create schema JSON directory",{schemaName:r,error:e}),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}});a.ipcMain.handle("write-schema-json-file",async(s,r,e,t)=>{n("write-schema-json-file requested",{schemaName:r,fileName:e,contentLength:t.length});try{const c=await g(),l=f.join(c,"json-files",r.replace(/[^a-zA-Z0-9.-]/g,"_"));await i.promises.mkdir(l,{recursive:!0});const d=e.endsWith(".json")?e:`${e}.json`,u=f.join(l,d);return await i.promises.writeFile(u,t,"utf8"),n("Schema JSON file written successfully:",u),{success:!0,filePath:u}}catch(c){return o("Failed to write schema JSON file",{schemaName:r,fileName:e,error:c}),{success:!1,error:c instanceof Error?c.message:"Unknown error"}}});a.ipcMain.handle("list-schema-json-files",async(s,r)=>{n("list-schema-json-files requested",{schemaName:r});try{const e=await g(),t=f.join(e,"json-files",r.replace(/[^a-zA-Z0-9.-]/g,"_"));try{await i.promises.access(t,i.constants.F_OK)}catch{return n("Schema directory does not exist, returning empty list:",t),{success:!0,files:[]}}const c=await i.promises.readdir(t),l=[];for(const d of c){const u=f.join(t,d);try{if((await i.promises.stat(u)).isFile()&&d.endsWith(".json"))try{const m=await i.promises.readFile(u,"utf8"),F=JSON.parse(m);l.push({name:d,path:u,content:F})}catch(m){o("Failed to read schema JSON file",{fileName:d,error:m})}}catch(y){o("Failed to stat entry",{entry:d,error:y})}}return n("Successfully loaded schema JSON files",{schemaName:r,count:l.length}),{success:!0,files:l}}catch(e){return o("Failed to list schema JSON files",{schemaName:r,error:e}),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}});a.app.whenReady().then(()=>{n("App is ready, creating main window"),h(),n("System information",{platform:process.platform,arch:process.arch,version:process.version,electronVersion:process.versions.electron,userDataPath:a.app.getPath("userData"),tempPath:a.app.getPath("temp"),homePath:a.app.getPath("home")}),a.app.on("activate",()=>{a.BrowserWindow.getAllWindows().length===0&&(n("Reactivating app, creating new window"),h())})});a.app.on("window-all-closed",()=>{n("All windows closed"),process.platform!=="darwin"&&(n("Quitting app"),a.app.quit())});a.app.on("web-contents-created",(s,r)=>{r.on("new-window",(e,t)=>{e.preventDefault(),o("Blocked new window creation",{url:t})})});
