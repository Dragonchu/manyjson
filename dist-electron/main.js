"use strict";const s=require("electron"),f=require("path"),i=require("fs"),h=process.env.NODE_ENV==="development";function o(n,...e){console.log(`[INFO] ${new Date().toISOString()} - ${n}`,...e)}function a(n,e){console.error(`[ERROR] ${new Date().toISOString()} - ${n}`,e)}function c(n,...e){h&&console.log(`[DEBUG] ${new Date().toISOString()} - ${n}`,...e)}function y(n){if(!n||typeof n!="string")return{isValid:!1,error:"Filename is required and must be a string"};const e=n.trim();return e?e.includes("..")||e.includes("/")||e.includes("\\")?{isValid:!1,error:"Filename cannot contain path separators or relative path references"}:/[<>:"|?*\x00-\x1f]/.test(e)?{isValid:!1,error:"Filename contains invalid characters"}:Buffer.byteLength(e,"utf8")>255?{isValid:!1,error:"Filename is too long"}:/^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\.|$)/i.test(e)?{isValid:!1,error:"Filename uses a reserved name"}:{isValid:!0}:{isValid:!1,error:"Filename cannot be empty"}}async function m(n=3){const e=v();for(let t=1;t<=n;t++)try{c(`Ensuring config directory exists (attempt ${t}/${n}):`,e);try{await i.promises.access(e,i.constants.F_OK),c("Config directory already exists")}catch{o("Creating config directory:",e),await i.promises.mkdir(e,{recursive:!0}),o("Config directory created successfully")}try{return await i.promises.access(e,i.constants.W_OK),c("Config directory is writable"),e}catch(r){throw a("Config directory is not writable",r),new Error(`Config directory is not writable: ${e}`)}}catch(r){if(a(`Failed to create or access config directory (attempt ${t}/${n})`,r),t===n)throw r;await new Promise(l=>setTimeout(l,100*t))}throw new Error("Failed to ensure config directory after all retries")}function w(){const n=new s.BrowserWindow({width:1200,height:800,minWidth:1e3,minHeight:700,title:"ManyJson - JSON Schema Manager",backgroundColor:s.nativeTheme.shouldUseDarkColors?"#0a0a0a":"#ffffff",webPreferences:{preload:f.join(__dirname,"preload.js"),contextIsolation:!0,sandbox:!0,nodeIntegration:!1}});return h?(n.loadURL("http://localhost:5173"),n.webContents.openDevTools()):n.loadFile(f.join(__dirname,"../dist/index.html")),n}function v(){const n=s.app.getPath("userData"),e=f.join(n,"schemas");return c("Config directory path:",e),e}async function p(){return m()}s.ipcMain.handle("write-json-file",async(n,e,t)=>{o("write-json-file requested",{filePath:e,contentLength:t.length});try{const r=f.join(e,"..");try{await i.promises.access(r,i.constants.W_OK),c("Target directory is writable:",r)}catch(l){throw a("Target directory is not writable",{directory:r,error:l}),new Error(`Directory is not writable: ${r}`)}return await i.promises.writeFile(e,t,"utf8"),o("File written successfully:",e),{success:!0}}catch(r){return a("Failed to write file",{filePath:e,error:r instanceof Error?r.message:r,stack:r instanceof Error?r.stack:void 0}),{success:!1,error:r instanceof Error?r.message:"Unknown error"}}});s.ipcMain.handle("get-config-directory",async()=>{o("get-config-directory requested");try{const n=await p();return o("Config directory ready:",n),{success:!0,path:n}}catch(n){return a("Failed to get config directory",n),{success:!1,error:n instanceof Error?n.message:"Unknown error"}}});s.ipcMain.handle("write-config-file",async(n,e,t)=>{o("write-config-file requested",{fileName:e,contentLength:t.length});try{const r=y(e);if(!r.isValid)return a("Invalid filename provided",{fileName:e,error:r.error}),{success:!1,error:r.error};if(typeof t!="string")return a("Invalid content type",{contentType:typeof t}),{success:!1,error:"Content must be a string"};if(t.length>10*1024*1024)return a("Content too large",{contentLength:t.length}),{success:!1,error:"Content is too large (maximum 10MB)"};const l=await p(),d=f.join(l,e);c("Writing config file",{configDir:l,fileName:e,filePath:d});try{await i.promises.access(d,i.constants.F_OK),c("File already exists, checking write permissions"),await i.promises.access(d,i.constants.W_OK)}catch{c("File does not exist, will create new file")}const u=`${d}.tmp`;try{await i.promises.writeFile(u,t,"utf8"),await i.promises.rename(u,d),o("Config file written successfully",{filePath:d,size:t.length})}catch(g){try{await i.promises.unlink(u)}catch{c("No temp file to clean up")}throw g}return{success:!0,filePath:d}}catch(r){return a("Failed to write config file",{fileName:e,error:r instanceof Error?r.message:r,stack:r instanceof Error?r.stack:void 0,code:r==null?void 0:r.code,errno:r==null?void 0:r.errno,syscall:r==null?void 0:r.syscall,path:r==null?void 0:r.path}),{success:!1,error:r instanceof Error?r.message:"Unknown error"}}});s.ipcMain.handle("list-config-files",async()=>{o("list-config-files requested");try{const n=await p();c("Listing files in config directory:",n);const e=await i.promises.readdir(n);c("Found files:",e);const t=e.filter(l=>l.endsWith(".json")&&!l.endsWith(".tmp"));o("Found JSON files:",t);const r=await Promise.all(t.map(async l=>{const d=f.join(n,l);try{const u=await i.promises.readFile(d,"utf8"),g=JSON.parse(u);return c("Successfully read file:",{fileName:l,size:u.length}),{name:l,path:d,content:g}}catch(u){throw a("Failed to read or parse file",{fileName:l,error:u}),u}}));return o("Successfully loaded config files",{count:r.length}),{success:!0,files:r}}catch(n){return a("Failed to list config files",n),{success:!1,error:n instanceof Error?n.message:"Unknown error"}}});s.ipcMain.handle("show-open-dialog",async(n,e)=>{o("show-open-dialog requested",e);try{const t=await s.dialog.showOpenDialog(e);return c("Open dialog result:",t),t}catch(t){return a("Failed to show open dialog",t),{canceled:!0,filePaths:[]}}});s.ipcMain.handle("show-save-dialog",async(n,e)=>{o("show-save-dialog requested",e);try{const t=await s.dialog.showSaveDialog(e);return c("Save dialog result:",t),t}catch(t){return a("Failed to show save dialog",t),{canceled:!0,filePath:void 0}}});s.ipcMain.handle("delete-file",async(n,e)=>{o("delete-file requested",{filePath:e});try{return await i.promises.access(e,i.constants.F_OK),c("File exists, attempting to delete:",e),await i.promises.unlink(e),o("File deleted successfully:",e),{success:!0}}catch(t){return a("Failed to delete file",{filePath:e,error:t instanceof Error?t.message:t,code:t==null?void 0:t.code,errno:t==null?void 0:t.errno}),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}});s.app.whenReady().then(()=>{o("App is ready, creating main window"),w(),o("System information",{platform:process.platform,arch:process.arch,version:process.version,electronVersion:process.versions.electron,userDataPath:s.app.getPath("userData"),tempPath:s.app.getPath("temp"),homePath:s.app.getPath("home")}),s.app.on("activate",()=>{s.BrowserWindow.getAllWindows().length===0&&(o("Reactivating app, creating new window"),w())})});s.app.on("window-all-closed",()=>{o("All windows closed"),process.platform!=="darwin"&&(o("Quitting app"),s.app.quit())});s.app.on("web-contents-created",(n,e)=>{e.on("new-window",(t,r)=>{t.preventDefault(),a("Blocked new window creation",{url:r})})});
