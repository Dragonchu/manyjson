"use strict";const s=require("electron"),f=require("path"),o=require("fs"),h=process.env.NODE_ENV==="development";function i(n,...e){console.log(`[INFO] ${new Date().toISOString()} - ${n}`,...e)}function a(n,e){console.error(`[ERROR] ${new Date().toISOString()} - ${n}`,e)}function c(n,...e){h&&console.log(`[DEBUG] ${new Date().toISOString()} - ${n}`,...e)}function y(n){if(!n||typeof n!="string")return{isValid:!1,error:"Filename is required and must be a string"};const e=n.trim();return e?e.includes("..")||e.includes("/")||e.includes("\\")?{isValid:!1,error:"Filename cannot contain path separators or relative path references"}:/[<>:"|?*\x00-\x1f]/.test(e)?{isValid:!1,error:"Filename contains invalid characters"}:Buffer.byteLength(e,"utf8")>255?{isValid:!1,error:"Filename is too long"}:/^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\.|$)/i.test(e)?{isValid:!1,error:"Filename uses a reserved name"}:{isValid:!0}:{isValid:!1,error:"Filename cannot be empty"}}async function m(n=3){const e=v();for(let r=1;r<=n;r++)try{c(`Ensuring config directory exists (attempt ${r}/${n}):`,e);try{await o.promises.access(e,o.constants.F_OK),c("Config directory already exists")}catch{i("Creating config directory:",e),await o.promises.mkdir(e,{recursive:!0}),i("Config directory created successfully")}try{return await o.promises.access(e,o.constants.W_OK),c("Config directory is writable"),e}catch(t){throw a("Config directory is not writable",t),new Error(`Config directory is not writable: ${e}`)}}catch(t){if(a(`Failed to create or access config directory (attempt ${r}/${n})`,t),r===n)throw t;await new Promise(l=>setTimeout(l,100*r))}throw new Error("Failed to ensure config directory after all retries")}function w(){const n=new s.BrowserWindow({width:1200,height:800,minWidth:1e3,minHeight:700,title:"ManyJson - JSON Schema Manager",backgroundColor:s.nativeTheme.shouldUseDarkColors?"#0a0a0a":"#ffffff",webPreferences:{preload:f.join(__dirname,"preload.js"),contextIsolation:!0,sandbox:!0,nodeIntegration:!1}});return h?(n.loadURL("http://localhost:5173"),n.webContents.openDevTools()):n.loadFile(f.join(__dirname,"../dist/index.html")),n}function v(){const n=s.app.getPath("userData"),e=f.join(n,"schemas");return c("Config directory path:",e),e}async function p(){return m()}s.ipcMain.handle("read-file-sync",async(n,e)=>{i("IPC: read-file-sync called",{filename:e});try{const r=await o.promises.readFile(e,"utf-8"),t=JSON.parse(r);return i("File read successfully",{filename:e,contentLength:r.length}),t}catch(r){throw a("Failed to read file",{filename:e,error:r}),r}});s.ipcMain.handle("write-json-file",async(n,e,r)=>{i("write-json-file requested",{filePath:e,contentLength:r.length});try{const t=f.join(e,"..");try{await o.promises.access(t,o.constants.W_OK),c("Target directory is writable:",t)}catch(l){throw a("Target directory is not writable",{directory:t,error:l}),new Error(`Directory is not writable: ${t}`)}return await o.promises.writeFile(e,r,"utf8"),i("File written successfully:",e),{success:!0}}catch(t){return a("Failed to write file",{filePath:e,error:t instanceof Error?t.message:t,stack:t instanceof Error?t.stack:void 0}),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}});s.ipcMain.handle("get-config-directory",async()=>{i("get-config-directory requested");try{const n=await p();return i("Config directory ready:",n),{success:!0,path:n}}catch(n){return a("Failed to get config directory",n),{success:!1,error:n instanceof Error?n.message:"Unknown error"}}});s.ipcMain.handle("write-config-file",async(n,e,r)=>{i("write-config-file requested",{fileName:e,contentLength:r.length});try{const t=y(e);if(!t.isValid)return a("Invalid filename provided",{fileName:e,error:t.error}),{success:!1,error:t.error};if(typeof r!="string")return a("Invalid content type",{contentType:typeof r}),{success:!1,error:"Content must be a string"};if(r.length>10*1024*1024)return a("Content too large",{contentLength:r.length}),{success:!1,error:"Content is too large (maximum 10MB)"};const l=await p(),d=f.join(l,e);c("Writing config file",{configDir:l,fileName:e,filePath:d});try{await o.promises.access(d,o.constants.F_OK),c("File already exists, checking write permissions"),await o.promises.access(d,o.constants.W_OK)}catch{c("File does not exist, will create new file")}const u=`${d}.tmp`;try{await o.promises.writeFile(u,r,"utf8"),await o.promises.rename(u,d),i("Config file written successfully",{filePath:d,size:r.length})}catch(g){try{await o.promises.unlink(u)}catch{c("No temp file to clean up")}throw g}return{success:!0,filePath:d}}catch(t){return a("Failed to write config file",{fileName:e,error:t instanceof Error?t.message:t,stack:t instanceof Error?t.stack:void 0,code:t==null?void 0:t.code,errno:t==null?void 0:t.errno,syscall:t==null?void 0:t.syscall,path:t==null?void 0:t.path}),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}});s.ipcMain.handle("list-config-files",async()=>{i("list-config-files requested");try{const n=await p();c("Listing files in config directory:",n);const e=await o.promises.readdir(n);c("Found files:",e);const r=e.filter(l=>l.endsWith(".json")&&!l.endsWith(".tmp"));i("Found JSON files:",r);const t=await Promise.all(r.map(async l=>{const d=f.join(n,l);try{const u=await o.promises.readFile(d,"utf8"),g=JSON.parse(u);return c("Successfully read file:",{fileName:l,size:u.length}),{name:l,path:d,content:g}}catch(u){throw a("Failed to read or parse file",{fileName:l,error:u}),u}}));return i("Successfully loaded config files",{count:t.length}),{success:!0,files:t}}catch(n){return a("Failed to list config files",n),{success:!1,error:n instanceof Error?n.message:"Unknown error"}}});s.ipcMain.handle("show-open-dialog",async(n,e)=>{i("show-open-dialog requested",e);try{const r=await s.dialog.showOpenDialog(e);return c("Open dialog result:",r),r}catch(r){return a("Failed to show open dialog",r),{canceled:!0,filePaths:[]}}});s.ipcMain.handle("show-save-dialog",async(n,e)=>{i("show-save-dialog requested",e);try{const r=await s.dialog.showSaveDialog(e);return c("Save dialog result:",r),r}catch(r){return a("Failed to show save dialog",r),{canceled:!0,filePath:void 0}}});s.ipcMain.handle("delete-file",async(n,e)=>{i("delete-file requested",{filePath:e});try{return await o.promises.access(e,o.constants.F_OK),c("File exists, attempting to delete:",e),await o.promises.unlink(e),i("File deleted successfully:",e),{success:!0}}catch(r){return a("Failed to delete file",{filePath:e,error:r instanceof Error?r.message:r,code:r==null?void 0:r.code,errno:r==null?void 0:r.errno}),{success:!1,error:r instanceof Error?r.message:"Unknown error"}}});s.app.whenReady().then(()=>{i("App is ready, creating main window"),w(),i("System information",{platform:process.platform,arch:process.arch,version:process.version,electronVersion:process.versions.electron,userDataPath:s.app.getPath("userData"),tempPath:s.app.getPath("temp"),homePath:s.app.getPath("home")}),s.app.on("activate",()=>{s.BrowserWindow.getAllWindows().length===0&&(i("Reactivating app, creating new window"),w())})});s.app.on("window-all-closed",()=>{i("All windows closed"),process.platform!=="darwin"&&(i("Quitting app"),s.app.quit())});s.app.on("web-contents-created",(n,e)=>{e.on("new-window",(r,t)=>{r.preventDefault(),a("Blocked new window creation",{url:t})})});
